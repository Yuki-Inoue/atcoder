# Generated by AtcoderGreedy on 2018-05-26
# ARC098 C
# Your code here

N = gets.chomp.to_i
S = gets.chomp

class World
  def acc
    @acc ||=
      begin
        acc = []
        N.times do |i|
          s_i = to_s_index i
          acc << (acc.last || 0) +
                 (S[s_i] == normal_dir ? 0 : 1)
        end
        acc
      end
  end
end

class NormalWorld < World
  def normal_dir
    'E'
  end

  def to_s_index(i)
    i
  end
end

class ReverseWorld < World
  def normal_dir
    'W'
  end

  def to_s_index(i)
    N - i - 1
  end
end

normal = NormalWorld.new
reverse = ReverseWorld.new

mins = (1...(N - 1)).map do |i|
  normal_acc = normal.acc[i - 1]
  reverse_acc = reverse.acc[N - i - 1]
  # puts [normal_acc, reverse_acc].inspect
  normal_acc + reverse_acc
end

mins << normal.acc[N - 1]
mins << reverse.acc[N - 1]

puts mins.min
