# Generated by AtcoderGreedy on 2018-05-26
# ARC098 C
# Your code here

N = gets.chomp.to_i
S = gets.chomp

normal = Object.new
def normal.dir
  'E'
end
def normal.to_s_index(i)
  i
end

reverse = Object.new
def reverse.dir
  'W'
end

def reverse.to_s_index(i)
  N - i - 1
end

[normal, reverse].each do |world|
  def world.acc
    @acc ||=
      begin
        acc = []
        N.times do |i|
          s_i = to_s_index i
          acc << (acc.last || 0) +
                 (S[s_i] == dir ? 0 : 1)
        end
        acc
      end
  end
end

mins = (1...(N - 1)).map do |i|
  normal_acc = normal.acc[i - 1]
  reverse_acc = reverse.acc[N - i - 1]
  normal_acc + reverse_acc
end

mins << normal.acc[N - 1]
mins << reverse.acc[N - 1]

puts mins.min
