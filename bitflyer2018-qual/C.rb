#!/usr/bin/env ruby

# Generated by AtcoderGreedy on 2018-06-02
# BITFLYER2018-QUAL C

# my lib

module Enumerable
  # work just like String#split,
  # except this method does not use regex match
  # but check whether yield succeeds or not.
  def split
    current = nil
    ret = []
    each do |elem|
      if yield elem
        if current
          ret << current
          current = nil
        end
      elsif current
        current << elem
      else
        current = [elem]
      end
    end
    ret << current if current
    ret
  end
end

class Array
  # truncate tail, opposite of drop
  def clip(amount = 1)
    take_amount = size - amount
    take_amount < 0 ? [] : take(take_amount)
  end
end

def n_choose_k(n, k)
  return 0 if k > n
  result = 1
  1.upto(k) do |d|
    result *= n
    result /= d
    n -= 1
  end
  result
end

# end of lib

# Your code here

N, D = gets.chomp.split(' ').map(&:to_i)
X = gets.chomp.split(' ').map(&:to_i)

LEFT = Array.new(N) do |i|
  j = X.bsearch_index { |x| X[i] - x <= D }
  i - j
end

RIGHT = Array.new(N) do |i|
  j = X.bsearch_index { |x| x - X[i] > D }
  j ||= N
  j - i - 1
end

close_tuples = (0 ... N - 2).map do |i|
  n_choose_k RIGHT[i], 2
end

# $stderr.puts RIGHT.inspect
# $stderr.puts close_tuples.inspect

comb_for_j = (1 ... N - 1).map do |j|
  LEFT[j] * RIGHT[j]
end

# $stderr.puts comb_for_j.inspect

puts comb_for_j.reduce(&:+) - close_tuples.reduce(&:+)
